1. Assign value by a pair of {} to a container

pair<int, int> p;
// ...
p = {3, 4};
even a more complex pair

pair<int, pair<char, long long> > p;
// ...
p = {3, {'a', 8ll}};
What about vector, deque, set and other containers?

//Initialize array as 0
int person[100]={};

vector<int> v;
v = {1, 2, 5, 2};
for (auto i: v)
    cout << i << ' ';
cout << '\n';
// prints "1 2 5 2"


map<int, pair<int, int>> data;
data.insert({person,{type, time}});
cout << person <<":" << data[person].first << data[person].second << endl; 

set<int> sick_milk;
for ( auto it = sick_milk.begin(); it != sick_milk.end(); it++ ) {
	std::cout << *it;
}

map<int, vector<pair<int, int>>> data;
//no need to check if key exists
data[person].push_back({type, time});

vector<pair<int, int>> data_p = data[person];
for (const auto &feature : data_p) {
cout<<feature.first<<" " << feature.second<<endl;
}

Iterate the map
for (map<int, vector<pair<int, int>>>::iterator it=data.begin(); it!=data.end(); ++it) {
	  int person = it->first;
		vector<pair<int, int>> data_p = it->second;
		for (const auto &feature : data_p) {
			cout<<person<<":"<<feature.first<<"," << feature.second;
		}
		cout<<endl;
  }

2. Input and store as 2d array
4
bird 2 flies eatsworms
cow 4 eatsgrass isawesome makesmilk goesmoo
sheep 1 eatsgrass
goat 2 makesmilk eatsgrass

vector<vector<string>> animals(N);

for (int i = 0; i < N; ++i) {
    string name;
    cin >> name;
    int K;
    cin >> K;
    for (int j = 0; j < K; ++j) {
        string feature;
        cin >> feature;
        animals[i].push_back(feature);
    }
}
print out: 
for (int i = 0; i < N; ++i) {
    for (const auto &feature : animals[i]) {
      cout<<feature<<" ";
	}
	cout<<endl;
}

int greatest_common = 0;
for (int i = 0; i < N; ++i) {
        for( int j=i+1; j < N; j++) {
            int common = 0;
            //find the number of common elements in two array
            for (const auto &feature1 : animals[i]) {
                for (const auto &feature2 : animals[j]) {
                    if (feature1 == feature2) {
                        common++;
                        break;
                    }
                }
            }
            greatest_common = max(greatest_common, common);
        }
    
    }

3. Input chars as 2D arrays
3 8
AATCCCAT
GATTGCAA
GGTCGCAA
ACTCCCAG
ACTCGCAT
ACTTCCAT

If we know the upper bound, 
char spotty[500][50], plain[500][50];
set<string> exists;

int N,M;
cin >> N;
cin >> M;

for (int i = 0; i < N; i++) {
	string feature;
	cin >> feature;
	for (int j = 0; j < M; j++) {
		spotty[i][j] = feature[j];
	}
}

char spotty[500][50], plain[500][50];
set<string> exists;

bool test(int j1, int j2, int j3, int N) {
	bool good = true;

	// mark the values in A used by a spotty cow
	for (int i = 0; i < N; i++) {
		string s ;
		s +=  spotty[i][j1];
		s += spotty[i][j2];
		s += spotty[i][j3];
		//cout << s << endl;
		exists.insert(s);
	};

	// see if a plain cow has the same values as a spotty cow
	for (int i = 0; i < N; i++) {
		string s;
		s +=  plain[i][j1];
		s += plain[i][j2];
		s += plain[i][j3];
		if (exists.count(s)) good = false;

	}
	//check if a set has a string	
	exists.clear();
	return good;
}

5. IO
#define IO(NAME) \
    cin.tie(0)->sync_with_stdio(0); \
    if(fopen(NAME ".in","r")) freopen(NAME ".in","r",stdin), \
    freopen(NAME ".out","w",stdout); 

6. struct and sort
struct Event {
	int ts;
	int person1;
	int person2;
};
std::sort( events.begin(), events.end(), [&](const Event &e1, const Event &e2) {
		return e1.ts <= e2.ts;
	});
